$ g++ -o main main-before.cpp -g; valgrind ./main
==1283== Memcheck, a memory error detector
==1283== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1283== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1283== Command: ./main
==1283== 
2
==1283== Invalid read of size 8
==1283==    at 0x49B81F4: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==1283==    by 0x10A10D: void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) (new_allocator.h:168)
==1283==    by 0x109D9B: void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) (alloc_traits.h:535)
==1283==    by 0x109AC4: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::pop_back() (stl_vector.h:1229)
==1283==    by 0x109848: std::priority_queue<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::pop() (stl_queue.h:679)
==1283==    by 0x10951C: main (main-before.cpp:52)
==1283==  Address 0xffffffffffffffe0 is not stack'd, malloc'd or (recently) free'd
==1283== 
==1283== 
==1283== Process terminating with default action of signal 11 (SIGSEGV)
==1283==  Access not within mapped region at address 0xFFFFFFFFFFFFFFE0
==1283==    at 0x49B81F4: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==1283==    by 0x10A10D: void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) (new_allocator.h:168)
==1283==    by 0x109D9B: void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) (alloc_traits.h:535)
==1283==    by 0x109AC4: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::pop_back() (stl_vector.h:1229)
==1283==    by 0x109848: std::priority_queue<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::pop() (stl_queue.h:679)
==1283==    by 0x10951C: main (main-before.cpp:52)
==1283==  If you believe this happened as a result of a stack
==1283==  overflow in your program's main thread (unlikely but
==1283==  possible), you can try to increase the size of the
==1283==  main thread stack using the --main-stacksize= flag.
==1283==  The main thread stack size used in this run was 8388608.
==1283==
==1283== HEAP SUMMARY:
==1283==     in use at exit: 195,584 bytes in 7 blocks
==1283==   total heap usage: 7 allocs, 0 frees, 195,584 bytes allocated
==1283==
==1283== LEAK SUMMARY:
==1283==    definitely lost: 0 bytes in 0 blocks
==1283==    indirectly lost: 0 bytes in 0 blocks
==1283==      possibly lost: 0 bytes in 0 blocks
==1283==    still reachable: 195,584 bytes in 7 blocks
==1283==         suppressed: 0 bytes in 0 blocks
==1283== Rerun with --leak-check=full to see details of leaked memory
==1283==
==1283== For lists of detected and suppressed errors, rerun with: -s
==1283== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault