// Patryk Flama
// game: chaturanga

// Game rules:
// chess-like
// pawn - can only move 1 forward and attack on diagonals, player-dependant
// horse - JUMP like in chess
// elephant - JUMP to +2 orthogonal
// chariot - any diagonal
// counselor - 1 diagonal
// king - 1 any direction
// 
// black on top, white on bottom of the board

// ======= domains =======
domain Boolean = true | false
domain PieceType = pawn | horse | elephant | chariot | counselor | king
domain Player = black | white
domain Piece = empty | P(C, PT) 
  where C in {black, white}, PT in {pawn, horse, elephant, chariot, counselor, king}
domain Score = 0 | 100
domain Position = null | V(X, Y) where X in 0..7, Y in 0..7
domain Directions = upleft | up | upright | left | right | downleft | down | downright

domain OrtogonalDirections = up | down | left | right
domain DiagonalDirections = upleft | upright | downleft | downright

// ====== helpers ======
// functions applying direction on position
leftdir : Position -> Position
leftdir(null) = null
leftdir(V(X, Y)) = if X == 0 then null else V(X - 1, Y)

rightdir : Position -> Position
rightdir(null) = null
rightdir(V(X, Y)) = if X == 7 then null else V(X + 1, Y)

updir : Position -> Position
updir(null) = null
updir(V(_, 0)) = null
updir(V(X, Y)) = V(X, Y - 1)

downdir : Position -> Position
downdir(null) = null
downdir(V(_, 7)) = null
downdir(V(X, Y)) = V(X, Y + 1)


upleftdir : Position -> Position
upleftdir(V(X, Y)) = if X == 0 || Y == 0 then null else V(X-1,Y-1)
upleftdir(_) = null

uprightdir : Position -> Position
uprightdir(V(X, Y)) = if X == 7 || Y == 0 then null else V(X+1,Y-1)
uprightdir(_) = null

downleftdir : Position -> Position
downleftdir(V(X, Y)) = if X == 0 || Y == 7 then null else V(X-1,Y+1)
downleftdir(_) = null

downrightdir : Position -> Position
downrightdir(V(X, Y)) = if X == 7 || Y == 7 then null else V(X+1,Y+1)
downrightdir(_) = null

// convert direction name to direction function
direction: Directions -> Position -> Position
direction(upleft) = upleftdir
direction(up) = updir
direction(upright) = uprightdir
direction(left) = leftdir
direction(right) = rightdir
direction(downleft) = downleftdir
direction(down) = downdir
direction(downright) = downrightdir

// opponent
opponent : Player -> Player
opponent(white) = black
opponent(_) = white

// decomposing Piece into Player and PieceType
extract_player : Piece -> Player
extract_player(P(C, PT)) = C
extract_player(empty) = white //! we should never ask for that!

extract_piecetype : Piece -> PieceType
extract_piecetype(P(C, PT)) = PT
extract_piecetype(empty) = pawn //! we should never ask for that!

// ======== variables ========
board : Position -> Piece = {
  V(X, Y) = 
    if Y == 1 
    then P(black, pawn)
    else if Y == 6
    then P(white, pawn)

    else if Y == 0 && (X == 0 || X == 7) then P(black, chariot)
    else if Y == 0 && (X == 1 || X == 6) then P(black, horse)
    else if Y == 0 && (X == 2 || X == 5) then P(black, elephant)
    else if Y == 0 && X == 3 then P(black, king)
    else if Y == 0 && X == 4 then P(black, counselor)

    else if Y == 7 && (X == 0 || X == 7) then P(white, chariot)
    else if Y == 7 && (X == 1 || X == 6) then P(white, horse)
    else if Y == 7 && (X == 2 || X == 5) then P(white, elephant)
    else if Y == 7 && X == 4 then P(white, king)
    else if Y == 7 && X == 3 then P(white, counselor)

    else empty
  where X in 0..7, Y in 0..7
}

// active player
me : Player = white
// chosen position
position : Position
// chosen piece (to move)
taken_piece : Piece 
// chosen piece type
taken_piece_type : PieceType
// piece-movement function mode
// if true pieces check if can attack opponents king
// otherwise pieces check if can move to specific position (including attack on opponent)
attackKing : Boolean

// ------ piece-specific helpers ------
// --- pawn ---
// directions in which pawn can move
domain PawnDirections = down | downright | downleft
pawn_direction : Player -> PawnDirections -> Directions
pawn_direction(white, down) = up
pawn_direction(white, downright) = upright
pawn_direction(white, downleft) = upleft
pawn_direction(black, down) = down
pawn_direction(black, downright) = downright
pawn_direction(black, downleft) = downleft

// directions in which pawn has to attack
pawn_attacking : PawnDirections -> Boolean
pawn_attacking(down) = false
pawn_attacking(downright) = true
pawn_attacking(downleft) = true

// --- horse ---
perpendicular_direction : OrtogonalDirections -> OrtogonalDirections
perpendicular_direction(up) = left
perpendicular_direction(down) = right
perpendicular_direction(left) = down
perpendicular_direction(right) = up

reversed_direction : OrtogonalDirections -> OrtogonalDirections
reversed_direction(up) = down
reversed_direction(down) = up
reversed_direction(left) = right
reversed_direction(right) = left


// ======= functions =======
// chariot movement helper - check if he can attack given piece
graph canAttack(me : Player) {
  check(board[position] != empty) // ensure position not empty
  check(extract_player(board[position]) == opponent(me)) // and opponent piece on position

  branch {
    check(attackKing == false)  // if testing for attacking normal pieces
    check(extract_piecetype(board[position]) != king) // but we cant attack kings  
  } or {
    check(attackKing == true) // if testing for attacking king
    check(extract_piecetype(board[position]) == king)
  }
}

// ------ pieces moving functions -----
graph movePawn(me: Player) {
  // for each move that pawn can make
  forall pdi : PawnDirections {
    branch {
      // check if this move type is not attacking (move forward)
      check(pawn_attacking(pdi) == false)

      position = direction(pawn_direction(me, pdi))(position) // move pawn
      check(position != null) // ensure position on board
      check(board[position] == empty) // position has to be empty
      check(attackKing == false)
    } or {
      // check if this move type is attacking (move diagonal)
      check(pawn_attacking(pdi) == true)

      position = direction(pawn_direction(me, pdi))(position)
      check(position != null)

      // check if we can attack
      check(board[position] != empty) // ensure position not empty
      check(extract_player(board[position]) == opponent(me)) // and opponent piece on position

      branch {
        check(attackKing == false)  // if testing for attacking normal pieces
        check(extract_piecetype(board[position]) != king) // but we cant attack kings  
      } or {
        check(attackKing == true) // if testing for attacking king
        check(extract_piecetype(board[position]) == king)
      }
    }
  }
}

graph moveHorse(me : Player) {
  // choose horse 2 jumps direction and 1 last jump direction
  forall odi : OrtogonalDirections {  // choose first 2 jumps direction
    forall negate : Boolean {   // choose last jump direction
      // execute 2 jumps
      position = direction(odi)(position)
      position = direction(odi)(position)

      // decide where is last jump
      branch {
        check(negate == false)
        position = direction(perpendicular_direction(odi))(position)
      } or {
        check(negate == true)
        position = direction(reversed_direction(perpendicular_direction(odi)))(position)
      }

      check(position != null)
      // cant jump onto own pieces
      branch {
      check(board[position] == empty)
      check(attackKing == false)
      } or {
        check(board[position] != empty) // ensure position not empty
        check(extract_player(board[position]) == opponent(me)) // and opponent piece on position

        branch {
          check(attackKing == false)  // if testing for attacking normal pieces
          check(extract_piecetype(board[position]) != king) // but we cant attack kings  
        } or {
          check(attackKing == true) // if testing for attacking king
          check(extract_piecetype(board[position]) == king)
        }
      }
    }
  }
}

graph moveElephant(me : Player) {
  // choose elephant 2 jump direction
  forall odi : OrtogonalDirections {
    // execute 2 jumps
    position = direction(odi)(position)
    position = direction(odi)(position)

    check(position != null)
    // cant jump onto own pieces
    branch {
      check(board[position] == empty)
      check(attackKing == false)
    } or {
      check(board[position] != empty) // ensure position not empty
      check(extract_player(board[position]) == opponent(me)) // and opponent piece on position

      branch {
        check(attackKing == false)  // if testing for attacking normal pieces
        check(extract_piecetype(board[position]) != king) // but we cant attack kings  
      } or {
        check(attackKing == true) // if testing for attacking king
        check(extract_piecetype(board[position]) == king)
      }
    }
  }
}

graph moveChariot(me : Player) {
  // goes any amt of diagonal, but without jumping
  forall ddi : DiagonalDirections {
    // 7 times try to move diagonal and check if possible
    // if opponent hit stop going diagonal

    // move to next position
    position = direction(ddi)(position) check(position != null)
    // check if can attack on position -> ok, but no more moves
    //       if position empty -> ok, you can branch{} or make next move
    // you cant branch{} without attacking if you have to attack king
    branch { canAttack(me) } 
      or { check(board[position] == empty)
    branch { check(attackKing == false) } or {
    position = direction(ddi)(position) check(position != null)
    branch { canAttack(me) } 
      or { check(board[position] == empty)
    branch { check(attackKing == false) } or {
    position = direction(ddi)(position) check(position != null)
    branch { canAttack(me) }
      or { check(board[position] == empty)
    branch { check(attackKing == false) } or {
    position = direction(ddi)(position) check(position != null)
    branch { canAttack(me) } 
      or { check(board[position] == empty)
    branch { check(attackKing == false) } or {
    position = direction(ddi)(position) check(position != null)
    branch { canAttack(me) } 
      or { check(board[position] == empty)
    branch { check(attackKing == false) } or {
    position = direction(ddi)(position) check(position != null)
    branch { canAttack(me) } 
      or { check(board[position] == empty)
    branch { check(attackKing == false) } or {
    position = direction(ddi)(position) check(position != null)
    branch { canAttack(me) } 
      or { check(board[position] == empty)
    }}}}}}}}}}}}}
  }
}

graph moveCounselor(me : Player) {
  // moves 1 diagonal
  forall ddi : DiagonalDirections {
    position = direction(ddi)(position)
    check(position != null)

    branch {
      check(board[position] == empty)
      check(attackKing == false)
    } or {
      check(board[position] != empty) // ensure position not empty
      check(extract_player(board[position]) == opponent(me)) // and opponent piece on position

      branch {
        check(attackKing == false)  // if testing for attacking normal pieces
        check(extract_piecetype(board[position]) != king) // but we cant attack kings  
      } or {
        check(attackKing == true) // if testing for attacking king
        check(extract_piecetype(board[position]) == king)
      }
    }
  }
}

graph moveKing(me : Player) {
  // moves 1 in any direction
  forall di : Directions {
    position = direction(di)(position)
    check(position != null)

    branch {
      check(board[position] == empty)
      check(attackKing == false)
    } or {
      check(board[position] != empty) // ensure position not empty
      check(extract_player(board[position]) == opponent(me)) // and opponent piece on position

      branch {
        check(attackKing == false)  // if testing for attacking normal pieces
        check(extract_piecetype(board[position]) != king) // but we cant attack kings  
      } or {
        check(attackKing == true) // if testing for attacking king
        check(extract_piecetype(board[position]) == king)
      }
    }
  }
}

// ======= main functions =======
// execute move, based on chosed piece
graph move_piece(me : Player) {
  branch {
    check(taken_piece_type == pawn)
    movePawn(me)
  } 
  or {
    check(taken_piece_type == horse)
    moveHorse(me)
  } 
  or {
    check(taken_piece_type == elephant)
    moveElephant(me)
  } 
  or {
    check(taken_piece_type == chariot)
    moveChariot(me)
  } 
  or {
    check(taken_piece_type == counselor)
    moveCounselor(me)
  } 
  or {
    check(taken_piece_type == king)
    moveKing(me)
  }
}

// move all available pieces
graph move(me : Player) {
  // find my pieces and move them
  forall p:Position { 
    check(p != null && board[p] != empty && 
          extract_player(board[p]) == me)

    // i can play with this piece, so choose it
    position = p
    // and tag from where the piece moves
    $ p
  }

  taken_piece = board[position]
  taken_piece_type = extract_piecetype(taken_piece)
  board[position] = empty // take piece

  // make all possible moves, accordingly to taken piece type
  move_piece(me)

  // emit/tag with chosen destination position (cant emit variables)
  forall p:Position {
    check(p == position)
    $ p
  }

  // place piece on destionation
  board[position] = taken_piece 
}

// ------ check for win ------
// find mine king position on board
graph findKing(me : Player) {
  // for all positions check if piece on board fits king 'description'
  forall p : Position {
    check(p != null && board[p] != empty &&
          extract_player(board[p]) == me && 
          extract_piecetype(board[p]) == king)
    position = p
  }
}

// check if i am checkmated
graph checkmate(me : Player) {
    // check if my king is attacked
    attackKing = true
    check(reachable(move(opponent(me))))
    attackKing = false

    // check if my king can escape
    // find my king
    findKing(me)

    // move him to any possible position
    moveKing(me)

    // check if still attacked
    attackKing = true
    check(reachable(move(opponent(me))))
    attackKing = false
}

// ---- main game loop ----
graph turn() {
  // i am playing
  player = me

  // execute my move ()
  attackKing = false
  move(me)

  // let the keeper check for game logic
  player = keeper

  // if i did checkmate my opponent
  if reachable(checkmate(opponent(me))) {
    goals[me] = 100
    goals[opponent(me)] = 0
    end()
  }

  me = opponent(me)
}

graph rules() {
  loop {
    turn()
  }
}
